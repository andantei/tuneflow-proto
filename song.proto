syntax = "proto2";

package song;

message Note {
  optional int32 pitch = 1;
  optional int32 velocity = 2;
  optional int64 start_tick = 3;
  optional float start_time = 4;
  optional int64 end_tick = 5;
  optional float end_time = 6;
  optional uint32 id = 7; // Assigned by client.
}

message TempoEvent {
  optional int64 ticks = 1;
	optional float bpm = 2;
	optional float time = 3;
}

message TimeSignatureEvent {
  optional int64 ticks = 1;
	optional int32 numerator = 2;
	optional int32 denominator = 3;
}

message InstrumentInfo {
  optional int32 program = 1;
  optional bool is_drum = 2;
}

message AudioPluginInfo {
  optional string tf_id = 1;
  optional bool is_enabled = 2;
  optional string local_instance_id = 3; // Used by local client only, do not upload.
  optional string base64_states = 4;
}

message AutomatableParam {
  enum SourceType {
    UNDEFINED = 0;
    VOLUME = 1;
    PAN = 2;
    AUDIO_PLUGIN = 3;
  }

  message Source {
    optional SourceType type = 1;
    optional string audio_plugin_id = 2; // Required when type is AUDIO_PLUGIN.
    optional string param_id = 3; // Required when type is AUDIO_PLUGIN.
  }

  message ParamValue {
    optional int64 tick = 1;
    /** A value between 0 to 1, the actual value needs to be multiplied by the range of this param. */
    optional float value = 2;
  }

  /** Identifying which param this is automating. */
  optional Source source = 1;

  /** All the automation points. */
  repeated ParamValue values = 2;
}

// Next id: 17.
message Track {
  optional InstrumentInfo instrument = 1;
  repeated Note notes = 2 [deprecated = true]; // Deprecated, use clips instead.
  repeated InstrumentInfo suggested_instruments = 3;
  optional string uuid = 4; // Assigned by client.
  optional float volume = 5;
  optional bool solo = 6;
  optional bool muted = 7;
  optional int32 rank = 8; // Assigned by client.
  optional int64 track_start_tick = 9; // Assigned by client.
  optional int64 track_end_tick = 10; // Assigned by client.
  optional AudioPluginInfo sampler_plugin = 11;
  repeated AudioPluginInfo audio_plugin = 12;
  repeated Clip clips = 13;
  /** A value ranging from -64 to 63, which corresponds to midi value 0-127. */
  optional int32 pan = 14;
  optional string name = 15;
  /** Each item corresponds to one param and all its automation points. */
  repeated AutomatableParam automation_params = 16;
}

message Clip {
  optional string id = 1;
  optional int64 clip_start_tick = 2;
  optional int64 clip_end_tick = 3;
  // Notes will use absolute ticks.
  // This will be all the notes in the clip, including
  // those that may not be in the clip's range.
  repeated Note notes = 4;
  optional string name = 5;
}

message Song {
  optional int32 PPQ = 1;
  repeated TempoEvent tempos = 2;
  repeated TimeSignatureEvent time_signatures = 3;
  optional int64 last_tick = 4;
  optional float duration = 5;
  repeated Track tracks = 6;
}